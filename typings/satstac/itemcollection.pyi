"""
This type stub file was generated by pyright.
"""
from typing import Iterator
from .item import Item
from logging import getLogger

logger = getLogger(__name__)

class ItemCollection(object):
    """ A GeoJSON FeatureCollection of STAC Items with associated Collections """

    def __init__(self, items, collections=...) -> None:
        """ Initialize with a list of Item objects """
        ...
    @classmethod
    def open_remote(self, url, headers=...):
        """ Open remote file """
        ...
    @classmethod
    def open(cls, filename):
        """ Load an Items class from a GeoJSON FeatureCollection """
        ...
    @classmethod
    def load(cls, *args, **kwargs):
        """ Load an Items class from a GeoJSON FeatureCollection """
        ...
    def __len__(self):
        """ Number of scenes """
        ...
    def __getitem__(self, index) -> Item: ...
    def __iter__(self) -> Iterator[Item]: ...
    def dates(self):
        """ Get sorted list of dates for all scenes """
        ...
    def collection(self, id):
        """ Get collection records for this list of scenes """
        ...
    def properties(self, key, date=...):
        """ Set of values for 'key' property in Items, for specific date if provided """
        ...
    def summary(self, params=...):
        """ Print summary of all scenes """
        ...
    def calendar(self, group=...):
        """ Get calendar for dates """
        ...
    def assets_definition(self): ...
    def save(self, filename, **kwargs):
        """ Save scene metadata """
        ...
    def geojson(self, id=..., description=...):
        """ Get Items as GeoJSON FeatureCollection """
        ...
    def filter(self, key, values):
        """ Filter scenes on key matching value """
        ...
    def download_assets(self, *args, **kwargs): ...
    def download(self, *args, **kwargs):
        """ Download all Items """
        ...
